<drac2>
n           = "\n"
t           = '`'
out         = []
terms       = []
name_list   = []
size_list   = []
type_list   = []
align_list  = []
xp_list     = []
cr_list     = []
final_list  = []
g           = {}
a           = argparse(&ARGS&)
size        = a.last('size', '').lower()
typ         = a.last('type','').lower()
align       = a.last('align','').upper()
xp          = a.last('xp', 0, int)
cr          = a.last('cr','').lower()
book        = a.last('book','')
env         = a.get('env') or []
envLower    = [x.lower() for x in env if x!='True']

# import our gvars from our monsterList uvar and monsterServerList and pull relevant info from (small) critterDB jsons.
SvarSet    = set(load_json(get_svar('monsterServerList', '[]')))
UvarSet    = set(load_json(get('monsterList', '[]')))

# combine our gvar lists into one if there are multiple sources
GvarList = list(SvarSet | UvarSet)

# load our monsters from the gvars, sifting through the chaff of a critterDB json
if GvarList:
  for gvar in GvarList:
    if 'creatures' in (gDB:=load_yaml(get_gvar(gvar))):
      critterDB = {}
      DBname = ''.join([x[0] for x in gDB.name.split()]).strip('(')
      for M in gDB.creatures:
        DBalign = ''.join([x[0].upper() for x in M.stats.alignment.split()]) if len(M.stats.alignment.split())>1 else M.stats.alignment.capitalize()
        critterDB[M.name.lower()] = {"size": M.stats.size.lower() , "type": M.stats.race.lower() , "align": DBalign , "cr": M.stats.challengeRatingStr, "xp": M.stats.experiencePoints, "source": DBname.upper()}
        if M.flavor.environment:
          critterDB[M.name].update({"env": M.flavor.environment})
      g.update(critterDB)
    else:
      g.update(load_yaml(get_gvar(gvar)))
else:
  g.update(load_yaml(get_gvar("436634aa-b117-47ed-ab31-580e779a43dd")))  # if no monsterList cvar/svar, load the SRD monsters


# compile a list of xp and environments in order to support homebrew
xpSet  = set()
envSet = set()
bookSet= set()

for _, mon in g.items():  # look through each monster
  xpSet.add(mon.xp)  # add unique xp amounts to our list
  bookSet.add(mon.source)
  if 'env' in mon:  # some monsters do not have an env listed so we check first to avoid an error
    envSet.update(mon.env)  # add unique environments to our list

xpList  = list(xpSet)  # convert to a list to sort
xpList.sort()  # numerical order
bookList= list(bookSet)  # convert to a list to sort
bookList.sort()  # alphabetical order
envList = list(envSet)  # convert to a list to sort
envList.sort()  # alphabetical order

# instructions for later use
instructions = f""" -f "Use this to lookup some quick, general monster stats useful for building an encounter.  Defaults to trying to look up by monster name.  Enter only a monster's name, or a monster's name in quotes along with other arguments to filter by other stats like, Type (`-type`), Alignment (`-align`), CR (`-cr`), XP (`-xp`), Book (`-book`) or Environment (`-env`).\n\nYou can enter multiple environments, but they have to be from the list: {'`'+'`, `'.join(envList)+'`' if envList else '*`No Environments listed for current monsters`*'}, and with multiple `-env`, like `-env hill -env mountain`." -f "To choose a book use one of the abbreviations from your list of sources, as CritterDB sources will have unique abbreviated names: `{'`, `'.join(bookList)}`" -f "Some monsters do not have an Alignment or Environment and will be excluded from those search results." -f "Exact matches are given preference over partial matches.|Examples:\n`{ctx.prefix+ctx.alias} goblin` will return only a goblin but...\n`{ctx.prefix+ctx.alias} gobli` will retun a few monsters with `gobli` in their name like Goblin Boss, or Hobgoblin.\n`{ctx.prefix+ctx.alias} 'red dragon' -env hill` will grab an Adult Red Dragon, an Ancient Red Dragon, and a Young Red Dragon." """



# name matching while allowing users to input either an unquoted name, a quoted name with other args or using the -name argument
arg1      = a.last('name','').lower() if a.get('name') else '''&*&'''.lower() if '"' not in '''&*&''' and &ARGS& and len(&ARGS&)>1 and not (typ or align or xp or cr or env or book) else '''&1&'''.lower() if &ARGS& else ''
name_list = [arg1] if arg1 in g else [x for x in g if arg1 in x]

# help handling
if not arg1 or arg1 in "?help":
  return f"""embed {instructions}"""


# if we match a name, add it to our search terms, otherwise we start with a full list.
if name_list:
  terms.append(f"**Name:** `{arg1}`")
  search_list = name_list
else:
  search_list = list(g)


# size
if size:
  terms.append(f"**Size:** {size.capitalize()}")

# type
if typ:
  terms.append(f"**Type:** {typ.capitalize()}")

# alignment
if align:
  terms.append(f"**Alignment:** {align}")

# xp
if xp:
  low, high = [x for x in xpList if x<=xp][-1], [x for x in xpList if x>=xp][0]  # set our high and low thresholds
  terms.append(f"**XP:** {f'between {low} and {high}' if low!=high else f'{low}'}")

# cr
if cr:
  terms.append(f"**CR:** {cr}")
  cr = roll(f'{cr}*100')

# book
if book:
  terms.append(f"**Book:** {book}")

# environments
if env:
  terms.append(f"**Environment{'s' if len(envLower)>1 else ''}:** {', '.join([x.title() for x in envLower])}")


for mon in search_list:  # loop through our monster list and only append those that match our criteria
  mon_stat = g[mon]
  if size and not size in mon_stat.size:
    continue
  if typ and not typ in mon_stat.type:
    continue
  if align and not align in mon_stat.align:
    continue
  if xp and not low<=mon_stat.xp<=high:
    continue
  if cr and not cr == roll(f'{mon_stat.cr}*100'):
    continue
  if book and not book.lower() in mon_stat.source.lower():
    continue
  env_list = mon_stat.get("env",[])
  if env and not all(x in env_list for x in envLower):
    continue
  final_list.append(mon)

final_list.sort()

# a return for no results matching the criteria
if not terms and len(final_list)==len(search_list) or not final_list:
  return f'''embed -desc "No matches found for your input: `&*&`" {instructions} '''

# output up to 9 results
if 1<=len(final_list)<=9:
  out.append(f""" -desc "**Search Terms:**\n{'; '.join(terms)}" """)
  for y in final_list:
    out.append(f""" -f "{y.title()}:|{n.join([f'''**{x}**: {', '.join(g[y][x])}''' if x=='env' else f'**{x}**: {g[y][x]}' for x in g[y] ])}|inline" """)

# return if list is too long
elif len(final_list)>200:
  out.append(f""" -desc "Your search for `&*&` was not specific enough and Discord embeds cannot display {len(final_list)} monster names. " """)

# return a bunch of fields with monster names if 10 or more results
elif 9<len(final_list)<201:
  for x in range(9, 14):
    if (len(final_list)%x)>7:
      N = x
    else:
      N = x+1
  nested_list = [final_list[i*N:(i+1)*N] for i in range((len(final_list)+N-1)//N)]
  for x in nested_list:
    out.append(f''' -f "{n.join([f'{t}{mon.title():<32}{t}' for mon in x])}" ''')
  out.append(f""" -desc "**Search Terms:**\n{', '.join(terms)}\n**{len(final_list)} Matches found:**" -f "Be more specific for more detailed information." """)

# return this if something messed up real bad that I didn't account for.
else:
  out.append(f""" -desc "Something is seriously wrong here.\nFinal List: {final_list[:20]}\n Length: {len(final_list)}\nSearch Terms: `&*&`" -f "Please report this to the author." """)

# spit it all out
return "embed "+' '.join(out)

</drac2> -title "You did the Monster Match!" -footer "{{ctx.prefix+ctx.alias}} [\"monster name\"|-type|-align|-xp|-cr|-book|-env]" -thumb https://cdn.discordapp.com/attachments/709738212209197189/930280128976658502/images.png
